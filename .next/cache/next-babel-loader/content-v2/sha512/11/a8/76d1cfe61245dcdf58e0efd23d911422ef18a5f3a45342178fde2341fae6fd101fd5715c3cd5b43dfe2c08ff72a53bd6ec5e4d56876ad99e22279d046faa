{"ast":null,"code":"import _regeneratorRuntime from \"/Users/w2mac/Desktop/Desktop - Septa\\u2019s MacBook Air/Git/netlify-w2septa-portfolio/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/w2mac/Desktop/Desktop - Septa\\u2019s MacBook Air/Git/netlify-w2septa-portfolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport fetch from 'isomorphic-unfetch';\nvar baseRoot = 'https://api.github.com/users/ip-code/repos?sort=created';\nexport var fetchProjects = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var res, data, filtered;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(baseRoot);\n\n          case 2:\n            res = _context.sent;\n            _context.next = 5;\n            return res.json();\n\n          case 5:\n            data = _context.sent;\n            filtered = data.filter(function (i) {\n              return !i.fork && i.description != null;\n            });\n            return _context.abrupt(\"return\", filtered.map(function (_ref2) {\n              var id = _ref2.id,\n                  name = _ref2.name,\n                  description = _ref2.description,\n                  html_url = _ref2.html_url,\n                  homepage = _ref2.homepage;\n              return {\n                id: id,\n                name: name,\n                description: description,\n                html_url: html_url,\n                homepage: homepage\n              };\n            }));\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function fetchProjects() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/w2mac/Desktop/Desktop - Septaâ€™s MacBook Air/Git/netlify-w2septa-portfolio/pages/api/fetchProjects.ts"],"names":["fetch","baseRoot","fetchProjects","res","json","data","filtered","filter","i","fork","description","map","id","name","html_url","homepage"],"mappings":";;AACA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA,IAAMC,QAAQ,GAAG,yDAAjB;AAEA,OAAO,IAAMC,aAAa;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACTF,KAAK,CAACC,QAAD,CADI;;AAAA;AACrBE,YAAAA,GADqB;AAAA;AAAA,mBAERA,GAAG,CAACC,IAAJ,EAFQ;;AAAA;AAErBC,YAAAA,IAFqB;AAGrBC,YAAAA,QAHqB,GAGVD,IAAI,CAACE,MAAL,CAAY,UAACC,CAAD;AAAA,qBAA0C,CAACA,CAAC,CAACC,IAAH,IAAWD,CAAC,CAACE,WAAF,IAAiB,IAAtE;AAAA,aAAZ,CAHU;AAAA,6CAIpBJ,QAAQ,CAACK,GAAT,CACL;AAAA,kBAAGC,EAAH,SAAGA,EAAH;AAAA,kBAAOC,IAAP,SAAOA,IAAP;AAAA,kBAAaH,WAAb,SAAaA,WAAb;AAAA,kBAA0BI,QAA1B,SAA0BA,QAA1B;AAAA,kBAAoCC,QAApC,SAAoCA,QAApC;AAAA,qBAAqD;AAAEH,gBAAAA,EAAE,EAAFA,EAAF;AAAMC,gBAAAA,IAAI,EAAJA,IAAN;AAAYH,gBAAAA,WAAW,EAAXA,WAAZ;AAAyBI,gBAAAA,QAAQ,EAARA,QAAzB;AAAmCC,gBAAAA,QAAQ,EAARA;AAAnC,eAArD;AAAA,aADK,CAJoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbb,aAAa;AAAA;AAAA;AAAA,GAAnB","sourcesContent":["import { Project } from '../../interfaces';\nimport fetch from 'isomorphic-unfetch';\n\nconst baseRoot = 'https://api.github.com/users/ip-code/repos?sort=created';\n\nexport const fetchProjects = async (): Promise<Project[]> => {\n  const res = await fetch(baseRoot)\n  const data = await res.json();\n  const filtered = data.filter((i: { fork: any; description: null; }) => !i.fork && i.description != null);\n  return filtered.map(\n    ({ id, name, description, html_url, homepage, }) => ({ id, name, description, html_url, homepage, } as Project)\n  );\n}"]},"metadata":{},"sourceType":"module"}